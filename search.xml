<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云云服务器ECS简单使用</title>
      <link href="/posts/10009/"/>
      <url>/posts/10009/</url>
      
        <content type="html"><![CDATA[<h3 id="阿里云云服务器ECS简单使用"><a href="#阿里云云服务器ECS简单使用" class="headerlink" title="阿里云云服务器ECS简单使用"></a>阿里云云服务器ECS简单使用</h3><h5 id="emsp-emsp-昨天5-29，时隔一周终于初步开发好了仿QQ聊天软件服务器端和客户端程序，想找室友在不同机器上测试一下。需要租个服务器。弄了好一会，记录一下云服务器ECS简单使用吧。涉及实例安全组规则配置，远程连接云服务器，测试与云服务器的网络连接。"><a href="#emsp-emsp-昨天5-29，时隔一周终于初步开发好了仿QQ聊天软件服务器端和客户端程序，想找室友在不同机器上测试一下。需要租个服务器。弄了好一会，记录一下云服务器ECS简单使用吧。涉及实例安全组规则配置，远程连接云服务器，测试与云服务器的网络连接。" class="headerlink" title="&emsp;&emsp;昨天5.29，时隔一周终于初步开发好了仿QQ聊天软件服务器端和客户端程序，想找室友在不同机器上测试一下。需要租个服务器。弄了好一会，记录一下云服务器ECS简单使用吧。涉及实例安全组规则配置，远程连接云服务器，测试与云服务器的网络连接。"></a>&emsp;&emsp;昨天5.29，时隔一周终于初步开发好了仿QQ聊天软件服务器端和客户端程序，想找室友在不同机器上测试一下。需要租个服务器。弄了好一会，记录一下云服务器ECS简单使用吧。涉及实例安全组规则配置，远程连接云服务器，测试与云服务器的网络连接。</h5><br>阿里云云翼计划，云服务器ECS学生专享，9.5/月，真好。<p>地址：<a href="https://www.aliyun.com/activity/promotion/campus2018?source=5176.11533457&userCode=wrvvs1rm&type=copy" target="_blank" rel="noopener">https://www.aliyun.com/activity/promotion/campus2018?source=5176.11533457&amp;userCode=wrvvs1rm&amp;type=copy</a><br><br></p><h4 id="一、规则配置"><a href="#一、规则配置" class="headerlink" title="一、规则配置"></a>一、规则配置</h4><p>1.在云服务器ECS控制台，进入实例。<br><img src="https://img-blog.csdnimg.cn/20200530023856681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>2.本实例安全组，配置规则，添加一个规则。设置优先级，协议，端口和授权对象。优先级1-100，数字越小优先级越高，0.0.0.0/0授权所有对象。自己进行设置。<br><img src="https://img-blog.csdnimg.cn/20200530024500954.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200530024624921.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200530024633608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br></p><h4 id="二、Windows连接云服务器"><a href="#二、Windows连接云服务器" class="headerlink" title="二、Windows连接云服务器"></a>二、Windows连接云服务器</h4><p>1.打开Windows附件中的远程桌面连接，或者win+r输入mstsc打开。显示选项可以更多设置。<br>2.输入分配的公网IP和用户名，服务器登录名。显示中可以调整远程桌面的大小。<br><img src="https://img-blog.csdnimg.cn/2020053002582942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>3.本地资源详细里可以设置传输资源设备，登录服务器后可以直接复制资源。然后就可以开始连接了。需要密码，记得在创建好实例后重置密码。<br><img src="https://img-blog.csdnimg.cn/20200530030214296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br></p><h4 id="三、测试与云服务器的网络连接"><a href="#三、测试与云服务器的网络连接" class="headerlink" title="三、测试与云服务器的网络连接"></a>三、测试与云服务器的网络连接</h4><p>1.可以找一个网络测试工具。左边是服务器，设置好端口(规则配置时打开的端口)，侦听；右边输入公网IP和对应端口连接，发送消息。<br><img src="https://img-blog.csdnimg.cn/20200530031515443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br></p><h6 id="emsp-emsp-这几天也要交作业和实验，时间不多。再者我想等客户端再完善一点后再写博客以及上传代码，客户端人机交互方面还很不完善。Ui设计也有点麻烦，关键我还有强迫症-。"><a href="#emsp-emsp-这几天也要交作业和实验，时间不多。再者我想等客户端再完善一点后再写博客以及上传代码，客户端人机交互方面还很不完善。Ui设计也有点麻烦，关键我还有强迫症-。" class="headerlink" title="&emsp;&emsp;这几天也要交作业和实验，时间不多。再者我想等客户端再完善一点后再写博客以及上传代码，客户端人机交互方面还很不完善。Ui设计也有点麻烦，关键我还有强迫症~~。"></a>&emsp;&emsp;这几天也要交作业和实验，时间不多。再者我想等客户端再完善一点后再写博客以及上传代码，客户端人机交互方面还很不完善。Ui设计也有点麻烦，关键我还有强迫症~~。</h6>]]></content>
      
      
      <categories>
          
          <category> 聊天软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT访问SQL Server</title>
      <link href="/posts/10008/"/>
      <url>/posts/10008/</url>
      
        <content type="html"><![CDATA[<h2 id="QT访问SQL-Server"><a href="#QT访问SQL-Server" class="headerlink" title="QT访问SQL Server"></a>QT访问SQL Server</h2><h5 id="参考：https-blog-csdn-net-YJin-Woo-article-details-78821924"><a href="#参考：https-blog-csdn-net-YJin-Woo-article-details-78821924" class="headerlink" title="参考：https://blog.csdn.net/YJin_Woo/article/details/78821924"></a>参考：<a href="https://blog.csdn.net/YJin_Woo/article/details/78821924" target="_blank" rel="noopener">https://blog.csdn.net/YJin_Woo/article/details/78821924</a></h5><h5 id="emsp-emsp-基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。"><a href="#emsp-emsp-基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。" class="headerlink" title="&emsp;&emsp;基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。"></a>&emsp;&emsp;基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。</h5><p><br><br></p><h4 id="一、SQL-Server"><a href="#一、SQL-Server" class="headerlink" title="一、SQL Server"></a>一、SQL Server</h4><p>1.建立一个数据库PureChat，相信大家都会。<br>2.新建一个SQL Server用户。安全性-&gt;登录名，右击新建登录名。<br><img src="https://img-blog.csdnimg.cn/20200524173510823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>3.常规中设置登录名及密码，不勾选“强制实施密码策略”。<br><img src="https://img-blog.csdnimg.cn/20200524173606188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>4.选择用户映射，勾选要使用的数据库PureChat，确定。我已经完成，所以用户中显示了。<br><img src="https://img-blog.csdnimg.cn/20200524173745523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>5.接下来赋予用户一些增删查的权限。找到数据库-&gt;安全性-&gt;用户下的添加的用户，右击选择属性。<br><img src="https://img-blog.csdnimg.cn/20200524175909718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>6.点击成员身份，勾选db_datareader，da_datawriter，db_ddladmin，db_owner，确定。<br><img src="https://img-blog.csdnimg.cn/2020052418021274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>7.打开SQL Server 配置管理器，选择SQL Server网络配置下的协议，上一篇博客中启用了TCP/IP服务，右击TCP/IP打开属性，IP地址，将最后一个IPAll的TCP端口设置为1433。<br><img src="https://img-blog.csdnimg.cn/20200524180509638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br></p><h4 id="二、ODBC-开放数据库连接"><a href="#二、ODBC-开放数据库连接" class="headerlink" title="二、ODBC(开放数据库连接)"></a>二、ODBC(开放数据库连接)</h4><p>1.电脑桌面小娜搜索ODBC，或者控制面板-&gt;管理工具，找到ODBC打开。<br><br><br>2.点击添加，选择SQL Server。<br><img src="https://img-blog.csdnimg.cn/20200524182115180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200524182226621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>3.设置名称，描述是对这个数据源的简单描述，服务器就是登录SQL Server时的名称。<br><img src="https://img-blog.csdnimg.cn/20200524220838925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>4.选择使用用户输入登录ID和密码的SQL Server验证，输入登录名和密码。<br><img src="https://img-blog.csdnimg.cn/20200524190455645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>5.然后进行一些设置，最后完成时测试一下连接。我选择加密测试连接失败，不选则成功。<br><br><br></p><h4 id="三、QT"><a href="#三、QT" class="headerlink" title="三、QT"></a>三、QT</h4><p>创建一个项目，需要在.pro文件中加上QT += sql，代码如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"purechatserver.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSqlQuery></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QSqlError></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//QApplication a(argc, argv);</span>    QSqlDatabase db <span class="token operator">=</span> QSqlDatabase<span class="token operator">::</span><span class="token function">addDatabase</span><span class="token punctuation">(</span><span class="token string">"QODBC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//数据库驱动类型为SQL Server</span>    QString dsn <span class="token operator">=</span> QString<span class="token operator">::</span><span class="token function">fromLocal8Bit</span><span class="token punctuation">(</span><span class="token string">"PureChatDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据源名称</span>    db<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择本地主机，127.0.1.1</span>    db<span class="token punctuation">.</span><span class="token function">setDatabaseName</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置数据源名称</span>    db<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"G_bg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//登录用户</span>    db<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//密码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打开数据库</span>    <span class="token punctuation">{</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"打开失败"</span><span class="token operator">&lt;&lt;</span>db<span class="token punctuation">.</span><span class="token function">lastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"database open success!"</span><span class="token punctuation">;</span>        QSqlQuery <span class="token function">query</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM UserInformation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>query<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLongLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>query<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\                   <span class="token operator">&lt;&lt;</span>query<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>query<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//PureChatServer w;</span>    <span class="token comment" spellcheck="true">//w.show();</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2020052421511668.png#pic_center" alt="在这里插入图片描述"><br>&emsp;&emsp;当时我在创建数据源出现了连不上的一些问题，在前一篇SQL Servers身份验证中解决。</p>]]></content>
      
      
      <categories>
          
          <category> 聊天软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server设置SQL Server身份验证</title>
      <link href="/posts/10007/"/>
      <url>/posts/10007/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-Server设置SQL-Server身份验证"><a href="#SQL-Server设置SQL-Server身份验证" class="headerlink" title="SQL Server设置SQL Server身份验证"></a>SQL Server设置SQL Server身份验证</h1><h4 id="参考：https-www-cnblogs-com-caidekoujiao-p-5396163-html"><a href="#参考：https-www-cnblogs-com-caidekoujiao-p-5396163-html" class="headerlink" title="参考：https://www.cnblogs.com/caidekoujiao/p/5396163.html"></a>参考：<a href="https://www.cnblogs.com/caidekoujiao/p/5396163.html" target="_blank" rel="noopener">https://www.cnblogs.com/caidekoujiao/p/5396163.html</a></h4><h4 id="emsp-emsp-基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。"><a href="#emsp-emsp-基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。" class="headerlink" title="&emsp;&emsp;基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。"></a>&emsp;&emsp;基本就是和参考网站相同，只是记录一下。如侵权请联系删除，谢谢。</h4><p><br><br></p><h3 id="我会将聊天软件开发的过程及过程中遇到的一些问题按内容写在多篇博客中。当然我只是一个菜鸟，综合网上各位大佬才完成这些工作。在SQL-Server相关博客中基本和参考网站相同，如有侵权请联系删除，谢谢。"><a href="#我会将聊天软件开发的过程及过程中遇到的一些问题按内容写在多篇博客中。当然我只是一个菜鸟，综合网上各位大佬才完成这些工作。在SQL-Server相关博客中基本和参考网站相同，如有侵权请联系删除，谢谢。" class="headerlink" title="我会将聊天软件开发的过程及过程中遇到的一些问题按内容写在多篇博客中。当然我只是一个菜鸟，综合网上各位大佬才完成这些工作。在SQL Server相关博客中基本和参考网站相同，如有侵权请联系删除，谢谢。"></a>我会将聊天软件开发的过程及过程中遇到的一些问题按内容写在多篇博客中。当然我只是一个菜鸟，综合网上各位大佬才完成这些工作。在SQL Server相关博客中基本和参考网站相同，如有侵权请联系删除，谢谢。</h3><p>1.先用windows身份验证登录<br>2.右击服务器，点击属性，点击安全性，选择SQL Server和Windows身份验证模式，确定。会有一个重新启动SQL Server后，所做配置更改才会生效的提示。右击服务器，重新启动，Yes，然后重新用SQL Server登录。<br><img src="https://img-blog.csdnimg.cn/20200524165955424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200524170006902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200524170556822.png#pic_center" alt="在这里插入图片描述"><br><br><br>3.如果还是登陆不上。启动配置管理器。<br><img src="https://img-blog.csdnimg.cn/20200524170739738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>4.启用Named Pipes和TCP/IP。<br><img src="https://img-blog.csdnimg.cn/20200524171301684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk5MjE2OQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><br><br>5.重新用SQL Server身份验证登录。</p>]]></content>
      
      
      <categories>
          
          <category> 聊天软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态区间k-th小数或k-th大数(主席树和树状数组)</title>
      <link href="/posts/10006/"/>
      <url>/posts/10006/</url>
      
        <content type="html"><![CDATA[<h1 id="动态区间k-th小数或k-th大数-主席树和树状数组"><a href="#动态区间k-th小数或k-th大数-主席树和树状数组" class="headerlink" title="动态区间k-th小数或k-th大数(主席树和树状数组)"></a>动态区间k-th小数或k-th大数(主席树和树状数组)</h1><hr><h3 id="ZOJ-2112"><a href="#ZOJ-2112" class="headerlink" title="ZOJ 2112"></a><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=2112" target="_blank" rel="noopener">ZOJ 2112</a></h3><hr><h3 id="主席树和树状数组"><a href="#主席树和树状数组" class="headerlink" title="主席树和树状数组"></a>主席树和树状数组</h3><p>不知道主席树的可以去看下我的另一篇文章<a href="https://www.frankgbg.top/posts/10004/" target="_blank" rel="noopener">静态区间k-th小数或k-th大数(主席树)</a></p><ul><li>相同</li></ul><ol><li>建原序列主席树与静态区间主席树一样；</li></ol><ul><li>不同</li></ul><ol><li>所修改的值也包括在原序列，一起离散化</li><li>在修改值与查找上增加了树状数组</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;BIT是树状数组，计Find(x)表示x在离散化后数组中的下标<br>&nbsp;&nbsp;&nbsp;&nbsp;树状数组可以O(logn)计算“前缀和”，在查询静态[l,r]区间的k-th小值时是用[1,r]和[1,l-1]两棵树相减；所以在动态区间中只要用树状数组维护修改的信息，在询问时，除了上面两棵树外，在树状数组上多查询[1,l-1]和[1,r]修改了多少就可以了。<br>&nbsp;&nbsp;&nbsp;&nbsp;在修改a[p]值时，将树状数组从p位置开始，每个BIT都在原来的基础上新建一个Find(a[p])对应的分支，该分支的sum-1；接着在修改后的BIT基础上再新建一个Find(z)对应的分支，该分支的sum+1；修改a[p]=z。<br>&nbsp;&nbsp;&nbsp;&nbsp;在查询时，将原序列第r和第l-1两棵树和修改的树状数组对应的大约log(l-1)+log(r)棵树作计算就得出[l,r]区间修改后的k-th小数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span>T<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> rt<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rt静态主席树,tot所用节点数</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b是离散化后数组,siz是离散化后个数</span><span class="token keyword">int</span> BIT<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//树状数组</span><span class="token keyword">struct</span> command<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//存询问和修改的结构体</span>    <span class="token keyword">char</span> op<span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span>R<span class="token punctuation">,</span>K<span class="token punctuation">;</span><span class="token punctuation">}</span>com<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建第0棵树</span>    p <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>    T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点</span>    T<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共用节点，在下一递归中更新l或r其中一个</span>    T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//沿途走下去的分支(要更新的点)中都要比上一个版本多或少1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在小的一边</span>    <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在大的一边</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//维护树状数组，更新修改的相关位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x <span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span>x <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">update</span><span class="token punctuation">(</span>BIT<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>BIT<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">,</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在原来的版本上进行修改 </span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找离散化后的下标</span>    <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//修改值</span>    <span class="token function">modify</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a[p]所在分支-1，去掉a[p]</span>    <span class="token function">modify</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token function">Find</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//z所在分支+1，加上z</span>    a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新值</span><span class="token punctuation">}</span><span class="token keyword">int</span> buf1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buf1_cnt<span class="token punctuation">,</span>buf2_cnt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> buf2_cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//加上[1,R]区间左边的数量</span>        t <span class="token operator">+</span><span class="token operator">=</span> T<span class="token punctuation">[</span>T<span class="token punctuation">[</span>buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> buf1_cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//减去[1,L-1]区间左边的数量</span>        t <span class="token operator">-</span><span class="token operator">=</span> T<span class="token punctuation">[</span>T<span class="token punctuation">[</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> buf1_cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//沿分支往线段树下走</span>        buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> t<span class="token operator">?</span>T<span class="token punctuation">[</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">:</span>T<span class="token punctuation">[</span>buf1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> buf2_cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//沿分支往线段树下走</span>        buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> t<span class="token operator">?</span>T<span class="token punctuation">[</span>buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">:</span>T<span class="token punctuation">[</span>buf2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-th小在小的一边</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-th小在大的一边，继续找(k-t)-th小</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Q</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span><span class="token keyword">int</span> R<span class="token punctuation">,</span><span class="token keyword">int</span> K<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//查找K-th小</span>    buf1_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    buf1<span class="token punctuation">[</span>buf1_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">[</span>L<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原序列树</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token number">-1</span><span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        buf1<span class="token punctuation">[</span>buf1_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> BIT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改后树</span>    buf2_cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    buf2<span class="token punctuation">[</span>buf2_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原序列树</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> R<span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        buf2<span class="token punctuation">[</span>buf2_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> BIT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改后树</span>    <span class="token keyword">int</span> qq <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">,</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>qq<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         siz <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>L<span class="token punctuation">,</span><span class="token operator">&amp;</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">,</span><span class="token operator">&amp;</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>                com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op <span class="token operator">=</span> <span class="token string">'Q'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>L<span class="token punctuation">,</span><span class="token operator">&amp;</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>                com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span><span class="token operator">++</span>siz<span class="token punctuation">]</span> <span class="token operator">=</span> com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//R是修改后的值</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        siz <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重后离散化</span>        tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建第0棵树</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找离散化后的下标</span>            <span class="token function">update</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">,</span>f<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建原序列1-n棵树</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化树状数组,最初没有修改信息 </span>            BIT<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>op <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token operator">?</span><span class="token function">Q</span><span class="token punctuation">(</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>L<span class="token punctuation">,</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">,</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>K<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">C</span><span class="token punctuation">(</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>L<span class="token punctuation">,</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex数学符号极简速查</title>
      <link href="/posts/10005/"/>
      <url>/posts/10005/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTex数学符号极简速查"><a href="#LaTex数学符号极简速查" class="headerlink" title="LaTex数学符号极简速查"></a>LaTex数学符号极简速查</h1><hr><p>Markdown中使用时，”_”和”\&quot;需要用”&quot;转义，在它们前加一个”&quot;</p><hr><h3 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h3><ol><li>下标$a_{1}$<br>a_{1}</li><li>乘法$x\times y$<br>x \times y</li><li>乘方$2^{3x}$<br>2^{3x}</li><li>下标乘方$a^{3}_{i}$<br>a^{3}_{i}</li><li>平方根$\sqrt {x + y}$<br>\sqrt {x + y}</li><li>多次开根$\sqrt[3]{x}$<br>\sqrt[3]{x}</li><li>除法$x \div y$<br>x \div y</li><li>分数$\frac{x}{y}$<br>\frac{x}{y}</li><li>异或$\oplus$<br>\oplus</li><li>小于等于$x \leq y$<br>x \leq y</li><li>大于等于$x \geq y$<br>x \geq y</li><li>不等于$x \neq y$<br>x \neq y</li><li>向下取整$\lfloor x \rfloor$<br>\lfloor x \rfloor</li><li>向上取整$\lceil x \rceil$<br>\lceil x \rceil</li><li>上水平线$\overline{m+n}$<br>\overline{m+n}</li><li>下水平线$\underline{m+n}$<br>\underline{m+n}</li><li>上大括号$\overbrace{a+b+\cdots+z}^{n}$<br>\overbrace{a+b+\cdots+z}^{n}</li><li>下大括号$\underbrace{a+b+\cdots+z}_{n}$<br>\underbrace{a+b+\cdots+z}_{n}</li><li>求和$\sum\limits_{x = 1}^{n} 7x$<br>\sum\limits_{x = 1}^{n} 7x</li><li>积分$\int_{0}^{\frac{\pi}{2}} \sin(x)$<br>\int_{0}^{\frac{\pi}{2}} \sin(x)</li><li>求积$\prod\limits_{x = 1}^{n}x$<br>\prod\limits_{x = 1}^{n}x</li></ol><h3 id="集合符号"><a href="#集合符号" class="headerlink" title="集合符号"></a>集合符号</h3><ol><li>属于$A \in B$<br>A \in B</li><li>不属于$A \notin B$<br>A \notin B</li><li>子集$A \subset B$<br>A \subset B</li><li>真子集$A \subseteq B$<br>A \subseteq B</li><li>无穷大$\propto$<br>\propto</li></ol><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p>大写首字母大写</p><ol><li>$\alpha$ \alpha</li><li>$\beta$ \beta</li><li>$\gamma$ \gamma</li><li>$\theta$ \theta</li><li>$\lambda$ \lambda</li><li>$\phi$ \phi</li><li>$\omega$ \omega</li><li>$\mu$ \mu</li><li>$\rho$ \rho</li><li>$\pi$ \pi</li></ol><h3 id="向量矩阵"><a href="#向量矩阵" class="headerlink" title="向量矩阵"></a>向量矩阵</h3><ol><li>向量$\vec{v}$<br>\vec{v}</li><li>矩阵<br>$<br>\begin{pmatrix}<br>a_n\<br>1<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>A&amp;B\<br>0&amp;1<br>\end{pmatrix}<br>\times<br>\begin{pmatrix}<br>a_{n-1}\<br>1<br>\end{pmatrix}<br>$</li></ol><p><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/zphTE2NfHmaqk1t8NDx.2EROT6Y4xYIuuR5Dy3YHobc!/b/dFIBAAAAAAAA&bo=twCVAbcAlQEDCSw!&rf=viewer_4" alt></p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/40MuntutTkJ3dXgqcO1yCLz2xTASjcQMDNzsQpoPtUo!/b/dEABAAAAAAAA&bo=SQJOA0kCTgMBCS4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/IkfT0MLAO.ML6W61zADdNp80CyeNvi9hg6817wsWNWI!/b/dLgAAAAAAAAA&bo=QAIvA0ACLwMBCS4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/oYaODgwg4bvcEjQiWgBxUSNxGgKRm1Paqiix.mWgqFY!/b/dDcBAAAAAAAA&bo=XwJbA18CWwMBGT4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/7SLi0WQAZybYE1T9Rv9aD47kCPVTZOFrfNIxpGUEfv0!/b/dL4AAAAAAAAA&bo=QwImA0MCJgMBGT4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/CqjADdms3scnsaGtwOeQMF4p0YYQkWcg.XHLcaL6mLY!/b/dFQBAAAAAAAA&bo=eAI7A3gCOwMBGT4!&rf=viewer_4" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学符号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 符号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态区间k-th小数或k-th大数(主席树)</title>
      <link href="/posts/10004/"/>
      <url>/posts/10004/</url>
      
        <content type="html"><![CDATA[<h1 id="静态区间k-th小数或k-th大数-主席树"><a href="#静态区间k-th小数或k-th大数-主席树" class="headerlink" title="静态区间k-th小数或k-th大数(主席树)"></a>静态区间k-th小数或k-th大数(主席树)</h1><hr><h3 id="POJ-2104"><a href="#POJ-2104" class="headerlink" title="POJ 2104"></a><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">POJ 2104</a></h3><hr><h3 id="主席树理解"><a href="#主席树理解" class="headerlink" title="主席树理解"></a>主席树理解</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;b是去重离散化后数组，rt[i]表示[1,i]建成的树的根节点，T是是树中节点。</p><h4 id="1-建n-1棵树"><a href="#1-建n-1棵树" class="headerlink" title="1.建n+1棵树"></a>1.建n+1棵树</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;第0棵树是基础，后面第i棵树在第i-1棵树的基础上建立，每棵树比前一棵增加大约$\lceil logn \rceil+1$个节点。</p><h4 id="2-建树时"><a href="#2-建树时" class="headerlink" title="2.建树时"></a>2.建树时</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;比较的是当前值在b中的位置和mid，考虑它在哪边，不断递归，直至l == r；形成一个新的分支，该分支上的总个数是前一棵树对应分支的总个数+1。</p><h4 id="3-在查询区间-l-r-中k-th小数时"><a href="#3-在查询区间-l-r-中k-th小数时" class="headerlink" title="3.在查询区间[l,r]中k-th小数时"></a>3.在查询区间[l,r]中k-th小数时</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;r-th棵树和（l-1）-th棵树左分支（也就是小的一边）的差和k比较，考虑k-th小在哪边；$t \geq k$，在左边找k-th小，否则在右边找（k-t）-th小；直至l==r找到b[l]是k-th小数。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;查询区间[l,r]中k-th大数时，在第3步稍加改变差和判断即可。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span>T<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> rt<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//rt静态主席树,tot所用节点数</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b是离散化后数组,siz是离散化后个数</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//建第0棵树</span>    p <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>    T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点</span>    T<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//共用节点，在下一递归中更新l或r其中一个</span>    <span class="token operator">++</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//沿途走下去的分支(要更新的点)中都要比上一个版本多1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在小的一边</span>    <span class="token keyword">else</span> <span class="token function">update</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>T<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在大的一边</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span><span class="token keyword">int</span> p2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//l和r如果相同,指k小在这个节点,而且这个节点的下标(对应到b)会被返回 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两棵线段树作差 ，k-th小l作差，k-th大r作差，下面ifelse相应改变</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> T<span class="token punctuation">[</span>T<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">-</span>T<span class="token punctuation">[</span>T<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> t<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>T<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-th小在小的一边</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>T<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-th小在大的一边，继续找(k-t)-th小</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找离散化后的下标</span>    <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    siz <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    siz <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重后离散化</span>    tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建第0棵树</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找离散化后的下标</span>        <span class="token function">update</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//建1-n棵树</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> ql<span class="token punctuation">,</span>qr<span class="token punctuation">,</span>qk<span class="token punctuation">;</span>cin <span class="token operator">>></span> ql <span class="token operator">>></span> qr <span class="token operator">>></span> qk<span class="token punctuation">;</span>        <span class="token keyword">int</span> qq <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>ql<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>qr<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>siz<span class="token punctuation">,</span>qk<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>qq<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题</title>
      <link href="/posts/10003/"/>
      <url>/posts/10003/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题"><a href="#hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题" class="headerlink" title="hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题"></a>hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题</h1><hr><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;打开hexo-theme-matery\layout\_partial中的footer.ejs，将本站总访问量和访客数的代码改为如下：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;&lt;/span&gt;    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;    本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;&lt;% } %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;&lt;/span&gt;    次,&amp;nbsp;    &lt;i class=&quot;fa fa-users&quot;&gt;&lt;/i&gt;    访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人&lt;% } %&gt;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;变化就在下面两句，将后面的＜/span＞写在前面了</p><pre><code>&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;&lt;/span&gt;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;本人没学过前端的东西，格式上的小问题吧。和我好友找这个问题找了好久，省略一万字的过程…，终于解决了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十届蓝桥杯B组C/C++国赛部分题解</title>
      <link href="/posts/10002/"/>
      <url>/posts/10002/</url>
      
        <content type="html"><![CDATA[<h1 id="2019年第十届蓝桥杯B组C-C-国赛部分题解"><a href="#2019年第十届蓝桥杯B组C-C-国赛部分题解" class="headerlink" title="2019年第十届蓝桥杯B组C/C++国赛部分题解"></a>2019年第十届蓝桥杯B组C/C++国赛部分题解</h1><hr><p>怎么说，这个国赛给我整自闭了。五个填空，五个大题，我就写五个填空加第一个大题吧。后面的一言难尽。</p><hr><h3 id="A"><a href="#A" class="headerlink" title="A."></a>A.</h3><p>题意：$2019^2$  $x^2$  $y^2$，找出最小的x+y使得前式为等差数列,（2019＜x＜y）；</p><p>思路：暴力<br>答案：7020</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2019</span><span class="token operator">*</span><span class="token number">2019</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">8000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">8000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">*</span>i<span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> j<span class="token operator">*</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">-</span>x <span class="token operator">==</span> b<span class="token operator">-</span>a<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i<span class="token operator">+</span>j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h3><p>题意：将2019拆成两个素数和（应该是两个吧，有人说任意个，忘了）,有几种方式，交换两个加数算一种，如2+2017 = 2019，2017+2 = 2019算一种</p><p>思路：暴力，我当两个做的<br>答案：1</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2020</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prime<span class="token punctuation">[</span><span class="token number">2020</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pri<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">2019</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>prime<span class="token punctuation">[</span><span class="token operator">++</span>pri<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> pri<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2019</span><span class="token operator">-</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h3><p>题意：约数有x个的最小整数y，记$Sx$ = y，如$S1$ = 1，$S2$ = 2，$S3$ = 4，求$S100$</p><p>思路：暴力<br>答案：45360</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">yue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">/</span>i <span class="token operator">!=</span> i<span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">yue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D"><a href="#D" class="headerlink" title="D."></a>D.</h3><p>题意：将一个7*7的方格沿着边剪开后，旋转右边那块拼在左边那块的不规则处，要求拼成的还是一个矩形，求有多少种裁剪方法</p><p>思路：沿着副对角线上三角和下三角对称。显而易见，剪得边只能向下或向右，统计到副对角线一共有多少种方法<br>答案：127</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="E"><a href="#E" class="headerlink" title="E."></a>E.</h3><p>题意：在一个5*5的方格中，起点是（1，1）沿着线走，计算不超过12步走回（1，1）的方法</p><p>思路：深搜，将5×5的方格看成6×6，原来在点上就变成了在格子上<br>答案：208</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">></span> <span class="token number">6</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> step <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> next_x <span class="token operator">=</span> x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> next_y <span class="token operator">=</span> y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>next_x<span class="token punctuation">,</span>next_y<span class="token punctuation">)</span> <span class="token operator">||</span> m<span class="token punctuation">[</span>next_x<span class="token punctuation">]</span><span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>next_x<span class="token punctuation">]</span><span class="token punctuation">[</span>next_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>next_x<span class="token punctuation">,</span>next_y<span class="token punctuation">,</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>next_x<span class="token punctuation">]</span><span class="token punctuation">[</span>next_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="F"><a href="#F" class="headerlink" title="F."></a>F.</h3><p>题意：给你两个字符串S和T，|S| ≥ |T|，求最少改变S中多少个字符使得在去掉一些不需要的字符后S = T</p><p>数据范围最大是（|S|，|T| ≤ 1000）</p><p>思路：最长公共子序列，由于是去掉一些不需要的数，所以当从T中第i位找是否和S中有相同时，得从S的第i位开始，前面不能匹配。同理后面也需要一个界限。局部的最长公共子序列</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tt<span class="token punctuation">;</span>cin <span class="token operator">>></span> tt<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> s<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>></span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_s <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len_t <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> len_t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> len_s<span class="token operator">-</span><span class="token punctuation">(</span>len_t<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ma <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ma<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> len_t<span class="token operator">-</span>ma <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上题目不保证正确性<br>G和I，也就是第七和第九题，暴力只能过最水的数据，另外两题没写</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届东北地区大学生程序设计竞赛前四题</title>
      <link href="/posts/10001/"/>
      <url>/posts/10001/</url>
      
        <content type="html"><![CDATA[<h1 id="2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题"><a href="#2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题" class="headerlink" title="2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题"></a>2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题</h1><hr><p>本人是个ACM菜鸡选手，写个博客记录下自己第一次带队的经历。大佬勿喷！<br>现场赛只做出J，G，C三题，比赛结束看了大佬的B题代码。其他题也没读过了，就写这四题题解吧<br>两位队友不可或缺，有他们才能稳住。</p><hr><h3 id="J"><a href="#J" class="headerlink" title="J."></a>J.</h3><p>题意：计算限制时间x，规则如下：</p><ol><li>x ≥ 3$a1$.</li><li>x ≥ $ai$+1，i∈[2,n].</li><li>x是最小的偶数.<br>Input:<br>第一行是一个整数T（1 ≤ T ≤ 10）表示测试数量<br>每个测试事例第一行有一个整数n（2 ≤ n ≤10）<br>第二行，有n个整数$a1,a2,…,an$（1 ≤ $ai$ ≤ 10）<br>Output：<br>输出x</li></ol><p>一开始没看到偶数！！</p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><pre><code>221 321 4</code></pre><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><pre><code>46</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> ma<span class="token punctuation">)</span> ma <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ma<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ma<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="G"><a href="#G" class="headerlink" title="G."></a>G.</h3><p>题意：给你n个矩形，移动这n个矩形使得存在一个方块覆盖了所有矩形。<br>第i个矩形的左下角方格$（ai，bi）$，右上角方格$（ci，di）$<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有一个整数n（1 ≤ n ≤100000）表示矩形数量<br>接下来n行，每行包含4个整数$ai，bi，ci，di（1 ≤ ai，bi，ci，di ≤ 10^9,ai ≤ ci，bi ≤ di）.Σn ≤ 10^6$<br>Output：<br>输出最小移动步数</p><p>思路：货仓选址问题：在一条数轴上有n家商店，求把货仓建在何处，使得货仓到每家商店的距离之和最小。设货仓建在x坐标处，x左侧有P家商店，右侧有Q家商店。若P＜Q，则每把货仓的选址向右移动1单位距离，距离之后就会变小Q-P。同理，P＞Q，则货仓的选址向左移动会使距离之和变小。当P=Q时为最优解。及建在中位数处。当n为奇数，货仓建在A[(n+1)/2]处最优，当n为偶数时，货仓建在A[n/2]~A[n/2+1]之间的任何位置都是最优解。<br>此题是二维的货仓选址，只需将x和y分别取中位数即可。</p><p>队友说移到中间位置，提醒了我中位数。</p><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><pre><code>122 2 3 34 4 5 5</code></pre><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><pre><code>2</code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tot<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1 <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2 <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">;</span>            x<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">;</span>            y<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">;</span>            x<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">;</span>            y<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> xx <span class="token operator">=</span> x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> yy <span class="token operator">=</span> y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> xx <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2 <span class="token operator">&lt;</span> xx<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> xx<span class="token operator">-</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题目规定了x1&lt;x2,不用我这么麻烦的判断和max</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">></span> xx <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2 <span class="token operator">></span> xx<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">)</span><span class="token operator">-</span>xx<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> yy <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2 <span class="token operator">&lt;</span> yy<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> yy<span class="token operator">-</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1 <span class="token operator">></span> yy <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2 <span class="token operator">></span> yy<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token operator">-</span>yy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h3><p>题意：给你n条直线。计算有多少对（i，j），（1 ≤ i ＜ j ≤ n），li，lj至少有一个公共点，重叠的线也是。<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有一个整数n（1 ≤ n ≤100000）表示直线数量<br>接下来n行，每行包含4个整数$xai，yai，xbi，ybi（|xai|，|yai|，|xbi|，|ybi| ≤ 10^9）$保证$（xai，yai）（xbi，ybi）$不重点. $Σn ≤ 10^6$<br>Output：<br>输出有多少对直线有公共点</p><p>思路：当斜率不同时（斜率不存在定义其斜率为INF，因为点都是整数，斜率最大也不会超过$10^9$，以下说斜率不同也包括斜率不存在的直线），必有交点，计算第i个直线时，只需加上前i-1条中有多少条与其斜率不同。斜率相同时，平行线无交点，重叠线两两相交，数量是num*（num-1）/2.</p><p>当时也是没想清楚，直接写，后来STL用了五个。TLE加WA了6次。慢慢理清思路，优化数据结构终于过了。还是不太稳啊，太急了。当时过了这题排名就上升了2名，罚时太多了。不过当时过了这题还是很开心的。</p><h4 id="input-2"><a href="#input-2" class="headerlink" title="input"></a>input</h4><pre><code>320 0 1 10 1 1 020 0 0 11 0 1 120 0 1 10 0 1 1</code></pre><h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4><pre><code>101</code></pre><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>LL <span class="token operator">></span> num<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>LL <span class="token operator">></span> <span class="token operator">></span> same_num<span class="token punctuation">;</span><span class="token keyword">int</span> ccc<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        same_num<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1 <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">-</span>num<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                same_num<span class="token punctuation">[</span>INF<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">double</span> xie <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y2<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x2<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>xie<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">-</span>num<span class="token punctuation">[</span>xie<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> c <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y1<span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">-</span>xie<span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x1<span class="token punctuation">;</span>            num<span class="token punctuation">[</span>xie<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            same_num<span class="token punctuation">[</span>xie<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">auto</span> i <span class="token operator">=</span> same_num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> j <span class="token operator">=</span> same_num<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">!=</span> j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">auto</span> k <span class="token operator">=</span> i<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> e <span class="token operator">=</span> i<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>k <span class="token operator">!=</span> e<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans <span class="token operator">+</span><span class="token operator">=</span> k<span class="token operator">-</span><span class="token operator">></span>second<span class="token operator">*</span><span class="token number">1LL</span><span class="token operator">*</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token operator">></span>second<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h3><p>题意：有n个糖果，m种类型，每个糖果有一个价值。从n个糖果中挑出一些糖果，S是你挑出的糖果的总价值，C是你挑出的糖果中某个类型最多的那个糖果的数量。求S/C最大。<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有两个整数n，m（1 ≤ n，m ≤100000）糖果总数和类型数<br>第二行有m个整数，$l1，l2，…,lm（1 ≤ li ≤ n）$<br>接下来n行，每行包含2个整数$ai，bi（ai ≤ 10^8，1 ≤ bi ≤ m）$. $Σn ≤ 10^6，Σm ≤ 10^6$<br>Output：<br>输出S/C，要求gcd(S,C) = 1</p><p>思路：首先选同一种类型的糖果一定是价值大的要优，所以先按价值排序。预处理出类型数量都是i时的最大价值，然后从类型数量小的枚举，累计价值（因为C是选出的类型数最大的那个数，类型数量小的直接累计）更新最大的S/C。</p><p>这题是队友从大佬那拍来的代码，应该是长春理工大学的。我们第二题同时读了B和C，我先写完B样例不对，C一开始队友都读成了线段，除了$O(n^2)$的算法实在不会了。然后看到G有人过了，直接去看了G题。G还是比较顺利（除了一开始数组开小了，WA一次）。C提示了直线，搞啊搞就搞出了C。B做了两小时也没做出来。还是太菜了。膜拜大佬。B是别人的代码，几乎没改动。</p><h4 id="input-3"><a href="#input-3" class="headerlink" title="input"></a>input</h4><pre><code>22 127 12 13 21 22 15 23 2</code></pre><h4 id="output-3"><a href="#output-3" class="headerlink" title="output"></a>output</h4><pre><code>9/25/1</code></pre><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span>LL<span class="token operator">></span> pii<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>pii a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>LL l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b[i]记当前i类型的糖果数，c[i]表示i类型选l[i]-1个的最大价值</span>LL f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i]表示类型数量都是i时的总价值</span><span class="token keyword">bool</span> <span class="token function">isgreater</span><span class="token punctuation">(</span>pii a<span class="token punctuation">,</span>pii b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">*</span> b<span class="token punctuation">.</span>second <span class="token operator">></span> a<span class="token punctuation">.</span>second <span class="token operator">*</span> b<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">gcd</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span>LL b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>cin  <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            b<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&lt;</span> l<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>b<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pii ans <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LL z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            z <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isgreater</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LL g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>first<span class="token punctuation">,</span>ans<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld/%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span>first<span class="token operator">/</span>g<span class="token punctuation">,</span>ans<span class="token punctuation">.</span>second<span class="token operator">/</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次比赛也是达到了目标，拿了个银牌。第一次作为主敲代码手体验了现场赛的氛围，还是有点紧张的。队友之间配合的不错，感谢我的两位队友。 </p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 东北地区赛 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
