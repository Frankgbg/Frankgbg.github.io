<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LaTex数学符号极简速查</title>
      <link href="/posts/10233/"/>
      <url>/posts/10233/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTex数学符号极简速查"><a href="#LaTex数学符号极简速查" class="headerlink" title="LaTex数学符号极简速查"></a>LaTex数学符号极简速查</h1><hr><p>Markdown中使用时，”_”和”\&quot;需要用”&quot;转义，在它们前加一个”&quot;</p><hr><h3 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h3><ol><li>下标$a_{1}$<br>a_{1}</li><li>乘法$x\times y$<br>x \times y</li><li>乘方$2^{3x}$<br>2^{3x}</li><li>下标乘方$a^{3}_{i}$<br>a^{3}_{i}</li><li>平方根$\sqrt {x + y}$<br>\sqrt {x + y}</li><li>多次开根$\sqrt[3]{x}$<br>\sqrt[3]{x}</li><li>除法$x \div y$<br>x \div y</li><li>分数$\frac{x}{y}$<br>\frac{x}{y}</li><li>异或$\oplus$<br>\oplus</li><li>小于等于$x \leq y$<br>x \leq y</li><li>大于等于$x \geq y$<br>x \geq y</li><li>不等于$x \neq y$<br>x \neq y</li><li>向下取整$\lfloor x \rfloor$<br>\lfloor x \rfloor</li><li>向上取整$\lceil x \rceil$<br>\lceil x \rceil</li><li>上水平线$\overline{m+n}$<br>\overline{m+n}</li><li>下水平线$\underline{m+n}$<br>\underline{m+n}</li><li>上大括号$\overbrace{a+b+\cdots+z}^{n}$<br>\overbrace{a+b+\cdots+z}^{n}</li><li>下大括号$\underbrace{a+b+\cdots+z}_{n}$<br>\underbrace{a+b+\cdots+z}_{n}</li><li>求和$\sum\limits_{x = 1}^{n} 7x$<br>\sum\limits_{x = 1}^{n} 7x</li><li>积分$\int_{0}^{\frac{\pi}{2}} \sin(x)$<br>\int_{0}^{\frac{\pi}{2}} \sin(x)</li><li>求积$\prod\limits_{x = 1}^{n}x$<br>\prod\limits_{x = 1}^{n}x</li></ol><h3 id="集合符号"><a href="#集合符号" class="headerlink" title="集合符号"></a>集合符号</h3><ol><li>属于$A \in B$<br>A \in B</li><li>不属于$A \notin B$<br>A \notin B</li><li>子集$A \subset B$<br>A \subset B</li><li>真子集$A \subseteq B$<br>A \subseteq B</li><li>无穷大$\propto$<br>\propto</li></ol><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p>大写首字母大写</p><ol><li>$\alpha$ \alpha</li><li>$\beta$ \beta</li><li>$\gamma$ \gamma</li><li>$\theta$ \theta</li><li>$\lambda$ \lambda</li><li>$\phi$ \phi</li><li>$\omega$ \omega</li><li>$\mu$ \mu</li><li>$\rho$ \rho</li><li>$\pi$ \pi</li></ol><h3 id="向量矩阵"><a href="#向量矩阵" class="headerlink" title="向量矩阵"></a>向量矩阵</h3><ol><li>向量$\vec{v}$<br>\vec{v}</li><li>矩阵<br>$<br>\begin{pmatrix}<br>a_n\<br>1<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>A&amp;B\<br>0&amp;1<br>\end{pmatrix}<br>\times<br>\begin{pmatrix}<br>a_{n-1}\<br>1<br>\end{pmatrix}<br>$</li></ol><p><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/zphTE2NfHmaqk1t8NDx.2EROT6Y4xYIuuR5Dy3YHobc!/b/dFIBAAAAAAAA&bo=twCVAbcAlQEDCSw!&rf=viewer_4" alt></p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/40MuntutTkJ3dXgqcO1yCLz2xTASjcQMDNzsQpoPtUo!/b/dEABAAAAAAAA&bo=SQJOA0kCTgMBCS4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/IkfT0MLAO.ML6W61zADdNp80CyeNvi9hg6817wsWNWI!/b/dLgAAAAAAAAA&bo=QAIvA0ACLwMBCS4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/oYaODgwg4bvcEjQiWgBxUSNxGgKRm1Paqiix.mWgqFY!/b/dDcBAAAAAAAA&bo=XwJbA18CWwMBGT4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/7SLi0WQAZybYE1T9Rv9aD47kCPVTZOFrfNIxpGUEfv0!/b/dL4AAAAAAAAA&bo=QwImA0MCJgMBGT4!&rf=viewer_4" alt><br><img src="http://m.qpic.cn/psb?/V11e9Og61Cuz1K/CqjADdms3scnsaGtwOeQMF4p0YYQkWcg.XHLcaL6mLY!/b/dFQBAAAAAAAA&bo=eAI7A3gCOwMBGT4!&rf=viewer_4" alt></p>]]></content>
      
      
      <categories>
          
          <category> 数学符号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 符号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树，静态区间k-th小数或k-th大数</title>
      <link href="/posts/33176/"/>
      <url>/posts/33176/</url>
      
        <content type="html"><![CDATA[<h1 id="主席树，静态区间k-th小数或k-th大数"><a href="#主席树，静态区间k-th小数或k-th大数" class="headerlink" title="主席树，静态区间k-th小数或k-th大数"></a>主席树，静态区间k-th小数或k-th大数</h1><hr><h3 id="POJ-2104"><a href="#POJ-2104" class="headerlink" title="POJ 2104"></a><a href="http://poj.org/problem?id=2104" target="_blank" rel="noopener">POJ 2104</a></h3><hr><h3 id="主席树理解"><a href="#主席树理解" class="headerlink" title="主席树理解"></a>主席树理解</h3><p>b是去重离散化后数组，rt[i]表示[1,i]建成的树的根节点，T是是树中节点。</p><h4 id="1-建n-1棵树"><a href="#1-建n-1棵树" class="headerlink" title="1.建n+1棵树"></a>1.建n+1棵树</h4><p>第0棵树是基础，后面第i棵树在第i-1棵树的基础上建立，每棵树比前一棵增加大约$\lceil logn \rceil+1$个节点。</p><h4 id="2-建树时"><a href="#2-建树时" class="headerlink" title="2.建树时"></a>2.建树时</h4><p>比较的是当前值在b中的位置和mid，考虑它在哪边，不断递归，直至l == r；形成一个新的分支，该分支上的总个数是前一棵树对应分支的总个数+1。</p><h4 id="3-在查询区间-l-r-中k-th小数时"><a href="#3-在查询区间-l-r-中k-th小数时" class="headerlink" title="3.在查询区间[l,r]中k-th小数时"></a>3.在查询区间[l,r]中k-th小数时</h4><p>r-th棵树和（l-1）-th棵树左分支（也就是小的一边）的差和k比较，考虑k-th小在哪边；$t \geq k$，在左边找k-th小，否则在右边找（k-t）-th小；直至l==r找到b[l]是k-th小数。</p><p>查询区间[l,r]中k-th大数时，在第3步稍加改变差和判断即可。</p><pre><code>#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;typedef long long LL;const int maxn = 1e5+10;struct Node{    int l,r,sum;}T[maxn*40];int rt[maxn*40],tot;//rt静态主席树,tot所用节点数int a[maxn],b[maxn],siz;//b是离散化后数组,siz是离散化后个数void build(int &amp;p,int l,int r){//建第0棵树    p = ++tot;    T[p].sum = 0;    if(l == r) return;    int mid = (l+r)&gt;&gt;1;    build(T[p].l,l,mid);    build(T[p].r,mid+1,r);}void update(int &amp;p,int pre,int l,int r,int k){    p = ++tot;//新节点    T[p] = T[pre];//共用节点，在下一递归中更新l或r其中一个    ++T[p].sum;//沿途走下去的分支(要更新的点)中都要比上一个版本多1    if(l == r) return;    int mid = (l+r)&gt;&gt;1;    if(k &lt;= mid) update(T[p].l,T[pre].l,l,mid,k);//在小的一边    else update(T[p].r,T[pre].r,mid+1,r,k);//在大的一边}int query(int p1,int p2,int l,int r,int k){    //l和r如果相同,指k小在这个节点,而且这个节点的下标(对应到b)会被返回     if(l == r) return l;    //两棵线段树作差 ，k-th小l作差，k-th大r作差，下面ifelse相应改变    int t = T[T[p2].l].sum-T[T[p1].l].sum;    int mid = (l+r)&gt;&gt;1;    if(k &lt;= t)return query(T[p1].l,T[p2].l,l,mid,k);//k-th小在小的一边    else return query(T[p1].r,T[p2].r,mid+1,r,k-t);//k-th小在大的一边，继续找(k-t)-th小}inline int Find(int x){//找离散化后的下标    return lower_bound(b+1,b+siz+1,x)-b;}int main(int argc, const char *argv[]){    ios::sync_with_stdio(0);cin.tie(0);    int n,q;cin &gt;&gt; n &gt;&gt; q;    for(int i = 1;i &lt;= n;++i){        cin &gt;&gt; a[i];        b[i] = a[i];    }    siz = n;    sort(b+1,b+siz+1);    siz = unique(b+1,b+siz+1)-b-1;//去重后离散化    tot = 0;    build(rt[0],1,siz);//建第0棵树    for(int i = 1;i &lt;= n;++i){        int f = Find(a[i]);//找离散化后的下标        update(rt[i],rt[i-1],1,siz,f);//建1-n棵树    }    for(int i = 1;i &lt;= q;++i){        int ql,qr,qk;cin &gt;&gt; ql &gt;&gt; qr &gt;&gt; qk;        int qq = query(rt[ql-1],rt[qr],1,siz,qk);        cout &lt;&lt; b[qq] &lt;&lt; endl;    }    system(&quot;pause&quot;);    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题</title>
      <link href="/posts/58045/"/>
      <url>/posts/58045/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题"><a href="#hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题" class="headerlink" title="hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题"></a>hexo之hexo-theme-matery主题看板娘与底部访问人数冲突问题</h1><hr><hr><p>打开hexo-theme-matery\layout\_partial中的footer.ejs，将本站总访问量和访客数的代码改为如下：</p><pre><code>&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalTraffic) { %&gt;    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;&lt;/span&gt;    &lt;i class=&quot;fa fa-heart&quot;&gt;&lt;/i&gt;    本站总访问量 &lt;span id=&quot;busuanzi_value_site_pv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt;&lt;% } %&gt;&lt;% if (theme.busuanziStatistics &amp;&amp; theme.busuanziStatistics.totalNumberOfvisitors) { %&gt;    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;&lt;/span&gt;    次,&amp;nbsp;    &lt;i class=&quot;fa fa-users&quot;&gt;&lt;/i&gt;    访客数 &lt;span id=&quot;busuanzi_value_site_uv&quot; class=&quot;white-color&quot;&gt;&lt;/span&gt; 人&lt;% } %&gt;</code></pre><p>变化就在下面两句，将后面的＜/span＞写在前面了</p><pre><code>&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;&lt;/span&gt;</code></pre><p>本人没学过前端的东西，格式上的小问题吧。和我好友找这个问题找了好久，省略一万字的过程…，终于解决了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十届蓝桥杯B组C/C++国赛部分题解</title>
      <link href="/posts/55646/"/>
      <url>/posts/55646/</url>
      
        <content type="html"><![CDATA[<h1 id="2019年第十届蓝桥杯B组C-C-国赛部分题解"><a href="#2019年第十届蓝桥杯B组C-C-国赛部分题解" class="headerlink" title="2019年第十届蓝桥杯B组C/C++国赛部分题解"></a>2019年第十届蓝桥杯B组C/C++国赛部分题解</h1><hr><p>怎么说，这个国赛给我整自闭了。五个填空，五个大题，我就写五个填空加第一个大题吧。后面的一言难尽。</p><hr><h3 id="A"><a href="#A" class="headerlink" title="A."></a>A.</h3><p>题意：$2019^2$  $x^2$  $y^2$，找出最小的x+y使得前式为等差数列,（2019＜x＜y）；</p><p>思路：暴力<br>答案：7020</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;int main() {    int x = 2019*2019;    for(int i = 2020;i &lt; 8000;i++){        for(int j = i+1;j &lt; 8000;j++){            int a = i*i;            int b = j*j;            if(a-x == b-a) cout &lt;&lt; i+j &lt;&lt; endl;        }    }    return 0;}</code></pre><h3 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h3><p>题意：将2019拆成两个素数和（应该是两个吧，有人说任意个，忘了）,有几种方式，交换两个加数算一种，如2+2017 = 2019，2017+2 = 2019算一种</p><p>思路：暴力，我当两个做的<br>答案：1</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;int p[2020],prime[2020],pri;int main() {    for(int i = 2;i &lt;= 2019;i++){        bool flag = 0;        for(int j = 2;j &lt;= (int)sqrt(i);j++){            if(i%j == 0){                flag = 1;                break;            }        }        if(!flag) p[i] = 1,prime[++pri] = i;    }    int sum = 0;    for(int i = 1;i &lt;= pri;i++){        int x = 2019-prime[i];        if(p[x]) sum++;    }    cout &lt;&lt; sum / 2 &lt;&lt; endl;    return 0;}</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h3><p>题意：约数有x个的最小整数y，记$Sx$ = y，如$S1$ = 1，$S2$ = 2，$S3$ = 4，求$S100$</p><p>思路：暴力<br>答案：45360</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5+10;int f[maxn];int yue(int x){    int sum = 0;    for(int i = 1;i &lt;= (int)sqrt(x);i++){        if(x%i == 0) {            sum++;            if(x/i != i) sum++;        }    }    return sum;}int main() {    for(int i = 1;i &lt; 100000;i++){        int y = yue(i);        if(f[y]) continue;        f[y] = i;    }    cout &lt;&lt; f[100] &lt;&lt; endl;    return 0;}</code></pre><h3 id="D"><a href="#D" class="headerlink" title="D."></a>D.</h3><p>题意：将一个7*7的方格沿着边剪开后，旋转右边那块拼在左边那块的不规则处，要求拼成的还是一个矩形，求有多少种裁剪方法</p><p>思路：沿着副对角线上三角和下三角对称。显而易见，剪得边只能向下或向右，统计到副对角线一共有多少种方法<br>答案：127</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5+10;int dp[8][8];int main() {    for(int i = 1;i &lt;= 7;i++) dp[i][0] = 1;    int sum = 0;    for(int i = 1;i &lt;= 7;i++){        for(int j = 1;j &lt;= 8-i;j++){            dp[i][j] += dp[i-1][j];            dp[i][j] += dp[i][j-1];        }        sum += dp[i][8-i];    }    cout &lt;&lt; sum &lt;&lt; endl;    return 0;}</code></pre><h3 id="E"><a href="#E" class="headerlink" title="E."></a>E.</h3><p>题意：在一个5*5的方格中，起点是（1，1）沿着线走，计算不超过12步走回（1，1）的方法</p><p>思路：深搜，将5×5的方格看成6×6，原来在点上就变成了在格子上<br>答案：208</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5+10;const int dx[4] = {0,0,-1,1};const int dy[4] = {-1,1,0,0};int m[7][7],sum;bool valid(int x,int y){    if(x &lt; 1 || x &gt; 6 || y &lt; 1 || y &gt; 6) return false;    return true;}void dfs(int x,int y,int step){    if(step &gt; 12) return ;    if(step != 0 &amp;&amp; step &lt;= 12){        if(x == 1 &amp;&amp; y == 1){            sum++;            return ;        }    }    for(int i = 0;i &lt; 4;i++){        int next_x = x+dx[i];        int next_y = y+dy[i];        if(!valid(next_x,next_y) || m[next_x][next_y]) continue;        m[next_x][next_y] = 1;        dfs(next_x,next_y,step+1);        m[next_x][next_y] = 0;    }}int main() {    dfs(1,1,0);    cout &lt;&lt; sum &lt;&lt; endl;    return 0;}</code></pre><h3 id="F"><a href="#F" class="headerlink" title="F."></a>F.</h3><p>题意：给你两个字符串S和T，|S| ≥ |T|，求最少改变S中多少个字符使得在去掉一些不需要的字符后S = T</p><p>数据范围最大是（|S|，|T| ≤ 1000）</p><p>思路：最长公共子序列，由于是去掉一些不需要的数，所以当从T中第i位找是否和S中有相同时，得从S的第i位开始，前面不能匹配。同理后面也需要一个界限。局部的最长公共子序列</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e3+10;char s[maxn],t[maxn];int dp[maxn][maxn];int main() {    int tt;cin &gt;&gt; tt;    while(tt--){        cin &gt;&gt; s+1 &gt;&gt; t+1;        int len_s = strlen(s+1);        int len_t = strlen(t+1);        int ma = 0;        for(int i = 1;i &lt;= len_t;i++){            for(int j = i;j &lt;= len_s-(len_t-i);j++){                if(t[i] == s[j]) dp[i][j] = dp[i-1][j-1]+1;                else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);                ma = max(ma,dp[i][j]);            }        }        cout &lt;&lt; len_t-ma &lt;&lt; endl;    }    return 0;}</code></pre><p>以上题目不保证正确性<br>G和I，也就是第七和第九题，暴力只能过最水的数据，另外两题没写</p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届东北地区大学生程序设计竞赛前四题</title>
      <link href="/posts/23734/"/>
      <url>/posts/23734/</url>
      
        <content type="html"><![CDATA[<h1 id="2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题"><a href="#2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题" class="headerlink" title="2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题"></a>2019ccpc东北地区大学生程序设计竞赛（东北电力大学）前四题</h1><hr><p>本人是个ACM菜鸡选手，写个博客记录下自己第一次带队的经历。大佬勿喷！<br>现场赛只做出J，G，C三题，比赛结束看了大佬的B题代码。其他题也没读过了，就写这四题题解吧<br>两位队友不可或缺，有他们才能稳住。</p><hr><h3 id="J"><a href="#J" class="headerlink" title="J."></a>J.</h3><p>题意：计算限制时间x，规则如下：</p><ol><li>x ≥ 3$a1$.</li><li>x ≥ $ai$+1，i∈[2,n].</li><li>x是最小的偶数.<br>Input:<br>第一行是一个整数T（1 ≤ T ≤ 10）表示测试数量<br>每个测试事例第一行有一个整数n（2 ≤ n ≤10）<br>第二行，有n个整数$a1,a2,…,an$（1 ≤ $ai$ ≤ 10）<br>Output：<br>输出x</li></ol><p>一开始没看到偶数！！</p><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><pre><code>221 321 4</code></pre><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><pre><code>46</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 20+10;int a[maxn];int main(){    int t;    cin &gt;&gt; t;    while(t--){        int n ;cin &gt;&gt; n;        for(int i = 1;i &lt;= n;i++) cin &gt;&gt; a[i];        int ma = 0;        for(int i = 2;i &lt;= n;i++){            if(a[i] &gt; ma) ma = a[i];        }        ma++;        int ans = max(3*a[1],ma);        if(ans&amp;1) ans++;        cout &lt;&lt; ans &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="G"><a href="#G" class="headerlink" title="G."></a>G.</h3><p>题意：给你n个矩形，移动这n个矩形使得存在一个方块覆盖了所有矩形。<br>第i个矩形的左下角方格$（ai，bi）$，右上角方格$（ci，di）$<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有一个整数n（1 ≤ n ≤100000）表示矩形数量<br>接下来n行，每行包含4个整数$ai，bi，ci，di（1 ≤ ai，bi，ci，di ≤ 10^9,ai ≤ ci，bi ≤ di）.Σn ≤ 10^6$<br>Output：<br>输出最小移动步数</p><p>思路：货仓选址问题：在一条数轴上有n家商店，求把货仓建在何处，使得货仓到每家商店的距离之和最小。设货仓建在x坐标处，x左侧有P家商店，右侧有Q家商店。若P＜Q，则每把货仓的选址向右移动1单位距离，距离之后就会变小Q-P。同理，P＞Q，则货仓的选址向左移动会使距离之和变小。当P=Q时为最优解。及建在中位数处。当n为奇数，货仓建在A[(n+1)/2]处最优，当n为偶数时，货仓建在A[n/2]~A[n/2+1]之间的任何位置都是最优解。<br>此题是二维的货仓选址，只需将x和y分别取中位数即可。</p><p>队友说移到中间位置，提醒了我中位数。</p><h4 id="input-1"><a href="#input-1" class="headerlink" title="input"></a>input</h4><pre><code>122 2 3 34 4 5 5</code></pre><h4 id="output-1"><a href="#output-1" class="headerlink" title="output"></a>output</h4><pre><code>2</code></pre><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const int maxn = 1e5+10;struct node{    int x1 = 0;    int y1 = 0;    int x2 = 0;    int y2 = 0;}a[maxn];int x[maxn*2],y[maxn*2],tot;int main(){    int t;    cin &gt;&gt; t;    while(t--){        int n ;cin &gt;&gt; n;        tot = 0;        for(int i = 1;i &lt;= n;i++){            cin &gt;&gt; a[i].x1 &gt;&gt; a[i].y1 &gt;&gt; a[i].x2 &gt;&gt; a[i].y2;            x[++tot] = a[i].x1;            y[tot] = a[i].y1;            x[++tot] = a[i].x2;            y[tot] = a[i].y2;        }        sort(x+1,x+2*n+1);        sort(y+1,y+2*n+1);        int xx = x[n];        int yy = y[n];        LL ans = 0;        for(int i = 1;i &lt;= n;i++){            if(a[i].x1 &lt; xx &amp;&amp; a[i].x2 &lt; xx) ans += xx-max(a[i].x1,a[i].x2);//题目规定了x1&lt;x2,不用我这么麻烦的判断和max            else if(a[i].x1 &gt; xx &amp;&amp; a[i].x2 &gt; xx) ans += min(a[i].x1,a[i].x2)-xx;            if(a[i].y1 &lt; yy &amp;&amp; a[i].y2 &lt; yy) ans += yy-max(a[i].y1,a[i].y2);            else if(a[i].y1 &gt; yy &amp;&amp; a[i].y2 &gt; yy) ans += min(a[i].y1,a[i].y2)-yy;        }        cout &lt;&lt; ans &lt;&lt; endl;    }    return 0;}</code></pre><h3 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h3><p>题意：给你n条直线。计算有多少对（i，j），（1 ≤ i ＜ j ≤ n），li，lj至少有一个公共点，重叠的线也是。<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有一个整数n（1 ≤ n ≤100000）表示直线数量<br>接下来n行，每行包含4个整数$xai，yai，xbi，ybi（|xai|，|yai|，|xbi|，|ybi| ≤ 10^9）$保证$（xai，yai）（xbi，ybi）$不重点. $Σn ≤ 10^6$<br>Output：<br>输出有多少对直线有公共点</p><p>思路：当斜率不同时（斜率不存在定义其斜率为INF，因为点都是整数，斜率最大也不会超过$10^9$，以下说斜率不同也包括斜率不存在的直线），必有交点，计算第i个直线时，只需加上前i-1条中有多少条与其斜率不同。斜率相同时，平行线无交点，重叠线两两相交，数量是num*（num-1）/2.</p><p>当时也是没想清楚，直接写，后来STL用了五个。TLE加WA了6次。慢慢理清思路，优化数据结构终于过了。还是不太稳啊，太急了。当时过了这题排名就上升了2名，罚时太多了。不过当时过了这题还是很开心的。</p><h4 id="input-2"><a href="#input-2" class="headerlink" title="input"></a>input</h4><pre><code>320 0 1 10 1 1 020 0 0 11 0 1 120 0 1 10 0 1 1</code></pre><h4 id="output-2"><a href="#output-2" class="headerlink" title="output"></a>output</h4><pre><code>101</code></pre><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;const int INF = 0x7fffffff;const int maxn = 1e5+10;struct node{    int x1 = 0;    int y1 = 0;    int x2 = 0;    int y2 = 0;}a[maxn];map&lt;double,LL &gt; num;map&lt;double,map&lt;double,LL &gt; &gt; same_num;int ccc[maxn];int main(){    int t;    cin &gt;&gt; t;    while(t--){        int n ;        scanf(&quot;%d&quot;,&amp;n);        LL ans = 0;        num.clear();        same_num.clear();        for(int i = 1;i &lt;= n;i++) {            scanf(&quot;%d%d%d%d&quot;,&amp;a[i].x1,&amp;a[i].y1,&amp;a[i].x2,&amp;a[i].y2);            if(a[i].x1 == a[i].x2) {                ans += (i-1)-num[INF];                num[INF]++;                same_num[INF][a[i].x1]++;                continue;            }            double xie = (a[i].y2-a[i].y1)*1.0/(a[i].x2-a[i].x1);            if(num[xie]){                ans += (i-1)-num[xie];            }else ans += (i-1);            double c = a[i].y1*1.0-xie*a[i].x1;            num[xie]++;            same_num[xie][c]++;        }        auto i = same_num.begin();        auto j = same_num.end();        for(;i != j;i++){            auto k = i-&gt;second.begin();            auto e = i-&gt;second.end();            for(;k != e;k++){                ans += k-&gt;second*1LL*(k-&gt;second-1)/2;            }        }        printf(&quot;%lld\n&quot;,ans);    }    return 0;}</code></pre><h3 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h3><p>题意：有n个糖果，m种类型，每个糖果有一个价值。从n个糖果中挑出一些糖果，S是你挑出的糖果的总价值，C是你挑出的糖果中某个类型最多的那个糖果的数量。求S/C最大。<br>Input：<br>第一行是一个整数T（1 ≤ T ≤ 1000）表示测试数量<br>每个测试事例第一行有两个整数n，m（1 ≤ n，m ≤100000）糖果总数和类型数<br>第二行有m个整数，$l1，l2，…,lm（1 ≤ li ≤ n）$<br>接下来n行，每行包含2个整数$ai，bi（ai ≤ 10^8，1 ≤ bi ≤ m）$. $Σn ≤ 10^6，Σm ≤ 10^6$<br>Output：<br>输出S/C，要求gcd(S,C) = 1</p><p>思路：首先选同一种类型的糖果一定是价值大的要优，所以先按价值排序。预处理出类型数量都是i时的最大价值，然后从类型数量小的枚举，累计价值（因为C是选出的类型数最大的那个数，类型数量小的直接累计）更新最大的S/C。</p><p>这题是队友从大佬那拍来的代码，应该是长春理工大学的。我们第二题同时读了B和C，我先写完B样例不对，C一开始队友都读成了线段，除了$O(n^2)$的算法实在不会了。然后看到G有人过了，直接去看了G题。G还是比较顺利（除了一开始数组开小了，WA一次）。C提示了直线，搞啊搞就搞出了C。B做了两小时也没做出来。还是太菜了。膜拜大佬。B是别人的代码，几乎没改动。</p><h4 id="input-3"><a href="#input-3" class="headerlink" title="input"></a>input</h4><pre><code>22 127 12 13 21 22 15 23 2</code></pre><h4 id="output-3"><a href="#output-3" class="headerlink" title="output"></a>output</h4><pre><code>9/25/1</code></pre><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre><code>#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;typedef pair&lt;LL,LL&gt; pii;const int maxn = 1e5+10;pii a[maxn];LL l[maxn],b[maxn],c[maxn];//b[i]记当前i类型的糖果数，c[i]表示i类型选l[i]-1个的最大价值LL f[maxn];//f[i]表示类型数量都是i时的总价值bool isgreater(pii a,pii b){    return a.first * b.second &gt; a.second * b.first;}LL gcd(LL a,LL b){    return b == 0?a:gcd(b,a%b);}int main() {    int t;cin  &gt;&gt; t;    while(t--){        int n,m;cin &gt;&gt; n &gt;&gt; m;        for(int i = 1;i &lt;= m;i++) cin &gt;&gt; l[i];        for(int i = 1;i &lt;= m;i++) b[i] = c[i] = 0;        for(int i = 1;i &lt;= n;i++) f[i] = 0;        for(int i = 1;i &lt;= n;i++) cin &gt;&gt; a[i].first &gt;&gt; a[i].second;        sort(a+1,a+n+1);        int t;        for(int i = n;i &gt;= 1;i--){            t = a[i].second;            b[t]++;            if(b[t] &lt; l[t]) c[t] += a[i].first;            if(b[t] == l[t]) f[b[t]] += c[t];            if(b[t] &gt;= l[t]) f[b[t]] += a[i].first;        }        pii ans = make_pair(0,1);        LL z = 0;        for(int i = 1;i &lt;= n;i++){            z += f[i];            if(isgreater(make_pair(z,i),ans)) ans = make_pair(z,i);        }        LL g = gcd(ans.first,ans.second);        printf(&quot;%lld/%lld\n&quot;,ans.first/g,ans.second/g);    }    return 0;}</code></pre><p>这次比赛也是达到了目标，拿了个银牌。第一次作为主敲代码手体验了现场赛的氛围，还是有点紧张的。队友之间配合的不错，感谢我的两位队友。 </p>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 东北地区赛 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
